function data=readgrid(binfil)

% Input: 
%   binfil is a binary grid file, of the type generated by grid_hkle.m or slice_3d, and
%   contains data with the following content:
%       data.grid: type of binary file, block spe or 4D grid
%       data.title: title label
%       data.a: a axis
%       data.b: b axis
%       data.c: c axis
%       data.alpha: alpha
%       data.beta: beta
%       data.gamma: gamma
%       data.grid: type of binary file (4D grid, blocks of spe file, etc)
%       data.title_label: title label
%       data.efixed: value of ei
%       data.a: a axis
%       data.b: b axis
%       data.c c axis
%       data.alpha: alpha
%       data.beta: beta
%       data.gamma: gamma
%       data.u     Matrix (4x4) of projection axes in original 4D representation
%              u(:,1) first vector - u(1:3,1) r.l.u., u(4,1) energy etc.
%       din.ulen  Length of vectors in Ang^-1, energy
%       data.nfiles: number of spe files contained within the binary file
%   if data is in grid:
%       data.label: Labels of theprojection axes (1x4 cell array of charater
%       strings)
%       din.p0    Offset of origin of projection [ph; pk; pl; pen]
%       din.pax   Index of plot axes in the matrix din.u
%               e.g. if data is 3D, din.pax=[2,4,1] means u2, u4, u1 axes are x,y,z in any plotting
%                               2D, din.pax=[2,4]     "   u2, u4,    axes
%                               are x,y   in any plotting
%   if grid <4D:
%   din.iax   Index of integration axes in the matrix din.u
%               e.g. if data is 2D, din.iax=[3,1] means summation has been performed along u3 and u1 axes
%   din.uint  Integration range along each of the integration axes. Dimensions are uint(2,length(iax))
%               e.g. in 2D case above, is the matrix vector [u3_lo, u1_lo;
%               u3_hi, u1_hi]
% 
%   data.np1 = length(data.p1)  : number of grid boundaries along p1
%   data.np2 = length(data.p2)  : number of grid boundaries along p2
%       :    (for as many plot axes as given by length of dhead.pax
%   data.p1                : grid boundaries along p1
%   data.p2                : grid boundaries along p2
%       :
%   data.s(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) float32
%   data.e(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) float32
%   data.n(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) int16
%
%

% Author:
%   J. van Duijn     12/06/2005
% Modified:
%
% Horace v0.1   J.Van Duijn, T.G.Perring

disp('Reading binary file ...');
fid = fopen(binfil,'r');
hdata= getheader(fid);
if strcmp(hdata.grid,'spe'),
    disp('Error!! Reading wrong type of bin file');
    disp(' Can only read orthogonal grid data using this routine');
    return;
end
hdata.file= binfil;
data=getblock(fid,hdata);
fclose(fid);

