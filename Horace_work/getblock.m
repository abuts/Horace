function data=getblock(fid, data)

% this function is used to read in the spe bock in the binary file
% generated by gen_hkle or 4D grid data generated by grid_hkle. 
% It assumes that the file is already opened for
% reading and that fid is the file pointer associated with it. 
%
% output:
%   if data is in spe blocks
%   data.ei: incident energy used for spe file
%   data.psi: psi angle
%   data.cu: u crystal axis (see mslice)
%   data.cv: v crystal axis (see mslice)
%   data.file: file name
%   data.size: size(1)=number of detectors; size(2)=number of energy bins
%   data.v: array containing the values along u1, u2, u3
%   data.en: vector containing the energy bins
%   data.S: Intensity vector
%   data.ERR: error vector
%
%   if data is in grid:
%   Data structure containing the data contained in the binary grid file.
%   data.np1 = length(data.p1)  : number of grid boundaries along p1
%   data.np2 = length(data.p2)  : number of grid boundaries along p2
%       :    (for as many plot axes as given by length of dhead.pax
%   data.p1                : grid boundaries along p1
%   data.p2                : grid boundaries along p2
%        :
%   data.s(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) float32
%   data.e(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) float32
%   data.n(length(data.p1)-1,length(data.p2)-1,length(data.p3)-1,length(data.p4)-1) int16

% Author:
%   J. van Duijn     01/06/2005
% Modified:
%
% Horace v0.1   J.Van Duijn, T.G.Perring

if ~isfield(data,'pax'),
    [data.ei,count]= fread(fid, 1, 'float32');
    [data.psi,count]= fread(fid, 1, 'float32');
    [data.cu,count]= fread(fid, 3, 'float32');
    data.cu= data.cu';
    [data.cv,count]= fread(fid, 3, 'float32');
    data.cv=data.cv';
    [n,count]=fread(fid, 1, 'int32');
    [data.file,count]=fread(fid, n, '*char');
    data.file=data.file';
    [data.size,count]= fread(fid,2,'int32');
    sizet= data.size(1)*data.size(2);
    [data.v,count]= fread(fid,[3,sizet], 'float32');
    %data.v=reshape(data.v, sizet,3);
    % data.v=data.v';
    [data.en,count]= fread(fid,[1,data.size(2)],'float32');
    [data.S,count]= fread(fid,[1,sizet],'float32');
    [data.ERR,count]= fread(fid,[1,sizet],'float32');
elseif length(data.pax)==4,,
    [np1,count] = fread(fid,1,'int32');
    [np2,count] = fread(fid,1,'int32');
    [np3,count] = fread(fid,1,'int32');
    [np4,count] = fread(fid,1,'int32');
    [data.p1,count] = fread(fid,np1,'float32');
    [data.p2,count] = fread(fid,np2,'float32');
    [data.p3,count] = fread(fid,np3,'float32');
    [data.p4,count] = fread(fid,np4,'float32');
    ntot = (np1-1)*(np2-1)*(np3-1)*(np4-1);
    data.s = zeros(np1-1,np2-1,np3-1,np4-1);
    data.e = zeros(np1-1,np2-1,np3-1,np4-1);
    data.n = int16(data.s);
    [data.s,count] = fread(fid,ntot,'float32');
    data.s = reshape(data.s,np1-1,np2-1,np3-1,np4-1);
    [data.e,count] = fread(fid,ntot,'float32');
    data.e= reshape(data.e,np1-1,np2-1,np3-1,np4-1);
    [data.n,count] = fread(fid,ntot,'int16');
    data.n = int16(reshape(data.n,np1-1,np2-1,np3-1,np4-1));
elseif length(data.pax)==3,
    [np1,count] = fread(fid,1,'int32');
    [np2,count] = fread(fid,1,'int32');
    [np3,count] = fread(fid,1,'int32');
    [data.p1,count] = fread(fid,np1,'float32');
    [data.p2,count] = fread(fid,np2,'float32');
    [data.p3,count] = fread(fid,np3,'float32');
    ntot = (np1-1)*(np2-1)*(np3-1);
    data.s = zeros(np1-1,np2-1,np3-1);
    data.e = zeros(np1-1,np2-1,np3-1);
    data.n = int16(data.s);
    [data.s,count] = fread(fid,ntot,'float32');
    data.s = reshape(data.s,np1-1,np2-1,np3-1);
    [data.e,count] = fread(fid,ntot,'float32');
    data.e = reshape(data.e,np1-1,np2-1,np3-1);
    [data.n,count] = fread(fid,ntot,'int16');
    data.n= int16(reshape(data.n,np1-1,np2-1,np3-1));
elseif length(data.pax)==2,
    [np1,count] = fread(fid,1,'int32');
    [np2,count] = fread(fid,1,'int32');
    [data.p1,count] = fread(fid,np1,'float32');
    [data.p2,count] = fread(fid,np2,'float32');
    ntot = (np1-1)*(np2-1);
    data.s = zeros(np1-1,np2-1);
    data.e = zeros(np1-1,np2-1);
    data.n = int16(data.s);
    [data.s,count] = fread(fid,ntot,'float32');
    data.s= reshape(data.s,np1-1,np2-1);
    [data.e,count] = fread(fid,ntot,'float32');
    data.e= reshape(data.e,np1-1,np2-1);
    [data.n,count] = fread(fid,ntot,'int16');
    data.n = int16(reshape(data.n,np1-1,np2-1));
elseif length(data.pax)==2,
    [np1,count] = fread(fid,1,'int32');
    [data.p1,count] = fread(fid,np1,'float32');
    ntot = data.np1-1;
    data.s = zeros(np1-1);
    data.e = zeros(np1-1);
    data.n = int16(data.s);
    [data.s,count] = fread(fid,ntot,'float32');
    data.s = reshape(data.s,np1-1);
    [data.e,count] = fread(fid,ntot,'float32');
    data.e = reshape(data.e,np1-1);
    [data.n,count] = fread(fid,ntot,'int16');
    data.n = int16(reshape(data.n,np1-1));
else
    disp('Error: wrong type of binary file');
end