function path=horace_on(non_default_hor_path)
%  safely switches Horace on
%  horace_on()                         -- initializes Horace with default settings
%  horace_on(non_default_horace_path)  -- initializes Horace with non-default Horace folder;
%
%

default_horace_path  = '${Horace_CORE}';
% To use spinW together with Horace, modify the row below pointing to correct
% spinW location. Also need to modify spinw_on template and place it together
% with horace_on.m script.
spinw_installation_path = '${spinW_folder}';

%
warn_state=warning('off','all');    % turn off warnings
% (so don't get errors if removing non-existent paths
% -- if no package have been initialized before, this is normal situation)
try
    % get old code version if any available. Will throw if no Horace
    old_version = horace_version('-numeric');
catch
    old_version = 0; % may be there was very old Horace version with does
    % not have the horace_version function. Still want to compare versions
end
try
    herbert_off();
catch
end
try
    horace_off();
catch
    %no Horace was initialized
    old_version = [];
end
warning(warn_state);    % return warnings to initial state

%
if exist('non_default_hor_path','var') && ~isempty(non_default_hor_path)
    if (strcmpi(non_default_hor_path,'where') || strcmpi(non_default_hor_path,'which'))
        path = find_default_hor_path(default_horace_path);
        return;
    else
        horace_path  = non_default_hor_path;
    end
else
    horace_path = default_horace_path;
end
root_path = find_root_path(horace_path);
if isempty(root_path)
    error('HORACE:horace_on:invalid_argument', ...
        'Can not find horace init on path %s or %s/horace_core', ...
        horace_path,horace_path);
end
horace_path = fullfile(root_path,'horace_core');
new_version = this_horace_version(root_path);


% if spinW start up file exist, try to initialize it
sw_start = which('spinw_on.m');
ws = warning('off','MATLAB:rmpath:DirNotFound');
if isempty(sw_start)
    % check if spinW already on a path, though "on" script is not on the path
    sw_stargt = which('spinw_init');
    if ~isempty(sw_stargt)
        spinw_init;
        %else == no spinW, no point to warn users about it, probably they do not
        %        care
    end
else
    if spinw_installation_path(1)=='$' || isempty(spinw_installation_path)
        %             spinW was installed through its own installation script
        spinw_on(); % Horace installation does not know about it.
    else   % spinw was installed through horace_install
        spinw_on(spinw_installation_path);
    end
end
warning(ws);

if ~isempty(old_version) && new_version ~= old_version
    clearvars -global;
    clearvars config_store MPI_State ;
    evalin('base','clearvars')
    clearvars -except horace_path;
end


% if Herbert is not initiated, try to init it.
herbert_path = build_default_her_path(horace_path);
try
    init_herbert(herbert_path);
catch ME
    disp('HORACE:horace_on:invalid_argument: cannot initialise Herbert');
    rethrow(ME);
end
% init Horace
init_horace(horace_path);

%
hor = fileparts(which('horace_init'));
fprintf('HORACE located in folder:\n %s\n',hor)
warning('off','MATLAB:subscripting:noSubscriptsSpecified');
end


function init_horace(path)
if ~(exist(fullfile(path,'horace_init.m'),'file') == 2)
    path = fullfile(path,'horace_core');
end
addpath(path);
horace_init;

end
%
function root_path = find_root_path(trial_path)
% identify real path to Horace package resolving simulinks
addpath(trial_path);
full_path = which('horace_init');
rmpath(trial_path);
if isempty(full_path)
    trial_path = fullfile(trial_path,'horace_core');
    if exist(trial_path,'dir') == 7
        root_path = find_root_path(trial_path);
    else
        root_path = '';
    end
    return
else
    root_path = fileparts(fileparts(full_path));
end
end

function her_path = build_default_her_path(hor_path)
% build default Herbert path from knowledge that Herbert is located
% alongside the Horace
[fp,hor_folder] = fileparts(hor_path);
if strcmp(hor_folder,'horace_core')
    her_path = fullfile(fp,'herbert_core');
else
    her_path = fullfile(hor_path,'herbert_core');
end

end

function path =find_default_hor_path(hor_default_path)
path = which('horace_init.m');
if isempty(path)
    path = hor_default_path;
    if ~exist(fullfile(path,'horace_init.m'),'file')
        path='';
    end
else

end
path=fileparts(path);
end

function init_herbert(path)
% initialize Herbert directories.
if ~exist(fullfile(path,'herbert_init.m'),'file')
    path = fullfile(path,'herbert_core');
end

try
    herbert_off();
catch
end
addpath(path);
herbert_init;

end
%
function ver = this_horace_version(root_path)
% Returns the version of this instance of Horace
%
try
    ver_func_path = fullfile(root_path,'herbert_core','admin');
    addpath(ver_func_path);
    VERSION = herbert_get_build_version();
catch ME
    if ~strcmp(ME.identifier, 'MATLAB:UndefinedFunction')
        rethrow(ME);
    end
    VERSION = read_from_version_file(root_path);
end


% If only one output requested return whole version string
version_numbers = split(VERSION, '.');

% Return as many version numbers as requested
num_patch_digits = numel(version_numbers{3});
last_digit = 0.1^num_patch_digits*str2double(version_numbers{3});

ver = 100*str2double(version_numbers{1})+...
    str2double(version_numbers{2})+last_digit;
end


function version_str = read_from_version_file(ver_path)
try
    version_file = fullfile(ver_path , 'VERSION');
    version_str = [strtrim(fileread(version_file)), '.dev'];
catch
    version_str = '0.0.0.dev';
end
end
